一  环境说明
    以下所有内容测试基于：
    1. 编译版本为 ： 
        gcc version 9.3.0
        4G 内存
        2 核 cpu （Intel(R) Xeon(R) Platinum 8269CY CPU @ 2.50GHz）

二 书中知识：
    0. 给予所有情况需要注意的点：
        0.1 减少临时分配操作
        0.2 减少 for 内部初始化变量

    1. 关于数据遍历：
        1.1 基于该版本下，前++ 性能低于 后++ 
        1.2 += 操作减少了一次复制流程
        
    2. string 类型的注意点：
        2.1 string 类型迭代器访问比通过 [] 访问速度快
        2.2 clear() 修改的是计数器， 而不是具体数据
        
    3. 共享指针：
        3.1 通过 make_shared 一类的函数可以减少一次内存分配操作
    
    4. string_view 无拷贝复制
    
    5. move/forward 可以减少一次临时变量复制
    
    6. for(strlen ;;) 效率好于 for(;strlen;)
    
    7. double 运行时间 < float 运行时间
    
    8. switch 代替 if - else
    
    9. 不要在动态库内部分配内存
    
    10. 函数功能层级不要超过 3 层
    
    11. printf 消耗性能巨大
    
    12. string 和 map 中的 find 方式消耗比较大，特别是 std::map<string, *>
    
    13.散列表速度快很多
    
    14. 基于 C++ 11 版本的 STL 执行效率：
        // 索引： 根据 [i] 或 at 进行查找的
        1. vector and string
            - 尾插入 O(1)， 其他地方 O(n)
            - 索引时间 O(1)
            - 排序时间 O(nlog2n)
            - 已经排序查找 O(log2n)， 未排序 O(n)
        2. list
            - 插入时间 O(1)
            - 排序时间 O(nlog2n)
            - 查找时间 O(n)
            
        3. map
            - 有序
            - 插入时间 O(log2n)
            - 索引时间 O(log2n)
        
        4. unordered_map
            - 无序
            - 
          
    15. 并发：
        1. 时间分割 - 时间块
        2. 虚拟化（hypervisor） 技术，某些指令会 Trap 到虚拟设备中
        3. 容器化
        4. 对称式多处理
        5. 同步多线程 - 寄存器集
        6. 多进程
        7. 分布式处理
        8. 线程
        9. 任务


-------------------------------------------------------------------------------------------------------
额外增加的知识点:
    1. Timsort 排序
    2. 堆排序
    3. 内省排序
    4. 归并排序
    5. 树形排序
    (注: 归并排序, 堆排序, 内省排序 时间复杂度: nlogn , 空间复杂度: 1)
        
-------------------------------------------------------------------------------------------------------
推荐三方库：
    facebook https://github.com/facebook/folly/blob/master/folly/docs/FBString.md
    boost 标准库 https://udomain.dl.sourceforge.net/project/hpc/hpc/gcc/gcc-11.2-bin.tar.gz
    http://insanecoding.blogspot.com/2011/11/how-to-read-in-file-in-c 写文件

-------------------------------------------------------------------------------------------------------
术语：
    RVO: 返回值优化(return value optimization)/ 复制省略(copy elision)
    COW: 写时复制(copy on write)
-------------------------------------------------------------------------------------------------------    
预定： 《Hacker’s Delight 》（别名算法心得）
    